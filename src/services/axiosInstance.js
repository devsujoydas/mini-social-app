import axios from "axios";

// üîπ Main axios instance (‡¶∏‡¶¨ request ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_BACKEND_URL,
  withCredentials: true, // cookie automatically ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá
});

// üîπ Raw axios instance (refresh-token call ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ONLY)
const rawAxios = axios.create({
  baseURL: import.meta.env.VITE_BACKEND_URL,
  withCredentials: true,
});

// üîπ Refresh control variables
let isRefreshing = false;
let failedQueue = [];

// Queue process ‡¶ï‡¶∞‡¶æ‡¶∞ helper
const processQueue = (error, token = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

// üîπ Request interceptor ‚Üí token attach
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }
  return config;
});

// üîπ Response interceptor ‚Üí auto refresh token
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // 401 ‚Üí AccessToken expired
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        // ‡¶Ø‡¶¶‡¶ø already refresh ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚Üí queue ‡¶§‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶æ‡¶ì
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then((token) => {
            originalRequest.headers["Authorization"] = `Bearer ${token}`;
            return axiosInstance(originalRequest);
          })
          .catch((err) => Promise.reject(err));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá rawAxios ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø
        const { data } = await rawAxios.post("/refresh-token");
        const newAccessToken = data?.accessToken;

        if (!newAccessToken) throw new Error("No accessToken returned");

        // Save new token
        localStorage.setItem("accessToken", newAccessToken);
        axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${newAccessToken}`;

        // Pending request replay ‡¶ï‡¶∞‡¶æ‡¶ì
        processQueue(null, newAccessToken);

        // Original request ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
        return axiosInstance(originalRequest);
      } catch (err) {
        // Refresh ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‚Üí ‡¶∏‡¶¨ clear ‡¶ï‡¶∞‡ßá logout
        processQueue(err, null);
        localStorage.removeItem("accessToken");
        localStorage.removeItem("currentUser");

        // ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ AuthContext ‡¶è‡¶∞ setUserData(null) ‡¶ì ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
        window.location.href = "/login";
        return Promise.reject(err);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
